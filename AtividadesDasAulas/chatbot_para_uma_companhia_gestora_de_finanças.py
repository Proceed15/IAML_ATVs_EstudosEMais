# -*- coding: utf-8 -*-
"""Chatbot para uma Companhia Gestora de Finanças

Automatically generated by Colab.

Original file is located at Google Colab

# Chatbot para uma Companhia Gestora de Finanças
"""

# Bibliotecas

import json
import random
import nltk
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
import re
from sklearn.feature_extraction.text import CountVectorizer # Bag of Words
from sklearn.feature_selection import chi2
# Importando o SentimentIntensityAnalyzer
from nltk.sentiment import SentimentIntensityAnalyzer

# Baixar recursos do NLTK
nltk.download('punkt')
nltk.download('punkt_tab')
# nltk.download('vader_lexicon')

# Vader não funcionava Score: {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}
!pip install transformers torch

# Construção do DATASET
dataset = {
    "intencoes": [
        {
            "tag": "info",
            "padroes": [
                "o que é",
                "ajuda",
                "como usar",
                "O que é esse aplicativo?",
                "Como funciona?",
                "Até quando vai estar disponível?",
                "Como posso usar?",
                "Vocês são regulamentados?",
                "Esse serviço é seguro?"
            ],
            "respostas": [
                "Somos uma plataforma de gestão financeira com IA.",
                "Crie uma conta clicando no canto superior direito",
                "Nossa tecnologia permite crédito rápido e seguro.",
                "Operamos dentro das regulamentações financeiras vigentes, veja a referente a seu país de residência.",
                "Mais dúvidas se diriga a seção de Ajuda disponível em https://GestaoFinanceira/Ajuda"
            ]
        },
        {
            "tag": "credito",
            "padroes": [
                "Quero crédito",
                "Empréstimo custa caro?",
                "Qual a taxa de juros?",
                "Quais são as condições para conseguir um empréstimo?",
                "Quanto tempo demora para aprovar o crédito?",
                "Tenho limite pré-aprovado?"
            ],
            "respostas": [
                "Oferecemos taxas competitivas baseadas no seu perfil financeiro.",
                "As condições variam de acordo com seu histórico e análise de crédito."
            ]
        },
        {
            "tag": "renegociacao",
            "padroes": [
                "Quero renegociar minha dívida",
                "Renegociar é possível?",
                "Como faço para renegociar?",
                "Posso reduzir o valor das parcelas?",
                "Tem algum desconto para quitação antecipada?"
            ],
            "respostas": [
                "Podemos revisar sua dívida se for até 5% do valor total do empréstimo.",
                "A renegociação pode ser feita diretamente pelo nosso aplicativo."
            ]
        },
        {
            "tag": "suporte_transac",
            "padroes": [
                "Quero concluir minha solicitação de crédito",
                "Suporte",
                "Como consigo falar com um atendente?",
                "O pagamento não caiu na minha conta",
                "Meu saldo não está atualizado"
            ],
            "respostas": [
                "Acesse a opção Atendimento Prioritário no aplicativo e aguarde nossa ligação.",
                "Se o pagamento não caiu, pode levar até 24h para ser processado."
            ]
        },
        {
            "tag": "seguranca",
            "padroes": [
                "Meu dinheiro está seguro?",
                "Vocês têm garantia?",
                "Posso confiar no serviço?",
                "Tem proteção contra fraudes?",
                "E se alguém invadir minha conta?"
            ],
            "respostas": [
                "Contamos com segurança avançada e criptografia para proteger sua conta.",
                "Utilizamos autenticação em duas etapas para mais segurança."
            ]
        },
        {
            "tag": "saudacao",
            "padroes": [
                "Olá!", "Oi", "Tudo bem?", "Como vai?", "Bom dia", "Boa tarde", "Boa noite"
            ],
            "respostas": [
                "Olá! Como posso te ajudar?",
                "Oi! Alguma dúvida sobre nossos serviços?"
            ]
        },
        {
            "tag": "despedida",
            "padroes": [
                "Tchau", "Adeus", "Muito obrigado", "Até mais", "Valeu!"
            ],
            "respostas": [
                "Se precisar de algo, estamos à disposição!",
                "Até logo! Tenha um ótimo dia!"
            ]
        },
    ]
}

# Preparação dos dados
intencoes = []
frases = []

for intent in dataset["intencoes"]:
    for padrao in intent["padroes"]:
        frases.append(padrao)
        intencoes.append(intent["tag"])


print(f"Frase: {frases}")
print(f"Intenções: {intencoes}")

# Criar modelo de classificação
modelo = make_pipeline(TfidfVectorizer(), MultinomialNB())
modelo.fit(frases, intencoes)

# Treinar o modelo
modelo.fit(frases, intencoes)

from transformers import pipeline

# A forma mais simples, Cria um pipeline para análise de sentimentos em português (em outras línguas também)
# A pipeline contém a categoria, modelo a ser utilizado
reconhecimento = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

def sentimento(texto):
    quantas_estrelas = reconhecimento(texto)[0]
    score = quantas_estrelas["score"] #Aqui avalia a confiança dessa frase ser como está sendo avaliada em estrelas (vai de 0 a 1 no máximo nesse caso)
    label = quantas_estrelas["label"] #Aqui pega as estrelas
# o Bert usa o sistema de estrelas, como se fosse um hotel, 5 e 4 estrelas positivo, 3 estrelas neutro e 2 estrelas e 1 estrela ele classifica como negativo
    if "5 stars" in label or "4 stars" in label:
        return "positivo", score
    elif "1 star" in label or "2 stars" in label:
        return "negativo", score
    else:
        return "neutro", score

# teste
testes = [
    "Esse serviço é péssimo!",
    "Muito bom, adorei!",
    "Não gostei muito, mas ok.",
    "Ótimo atendimento, nota 10!",
    "Horrível, não recomendo."
]

for teste in testes:
    sentimento_, score = sentimento(teste)
    print(f"\nEntrada: {teste} → Saída: Emoção: {sentimento_} e Score: {score:.4f}")

# Testes
testes = ["Muito bom!", "Que horrível!", "Nada mal.", "Isso é uma droga.", "Ótimo serviço!"]

# Comentei as partes que usavam o Vader
# sia = SentimentIntensityAnalyzer()

for teste in testes:
    # score = sia.polarity_scores(teste)
    print(f"\nEntrada: {teste} → Emoção: {sentimento(teste)}")

testes = ["Olá!", "Oi", "Tchau", "Quero crédito", "Quanto é", "Renegociar", "Suporte"]

for teste in testes:
  print(f"\nEntrada: {teste} --> Intenção Prevista: {modelo.predict([teste])[0]}");
testes = ["Oi", "Até logo", "Quero um lanche", "Que horas estão abertos?"]
for teste in testes:
  print(f"\nEntrada: {teste} → Intenção Prevista: {modelo.predict([teste])[0]}")

testes = ["Muito bom!", "Que horrível!", "Nada mal.", "Isso é uma droga.", "Ótimo serviço!"]

for teste in testes:
    print(f"\nEntrada: {teste} → Emoção: {sentimento(teste)}")

testes = ["custa caro", "muito obrigado", "suporte ruim", "excelente serviço"]
for teste in testes:
    print(f"\nEntrada: {teste} → Emoção: {sentimento(teste)}")

# ir

# Score é a taxa de confiança na resposta da emoção se considerar a pergunta como positiva negativa neutra
def chatbot(texto):
  intencao_predita = modelo.predict([texto])[0]
  emocao, score = sentimento(texto)
  for intent in dataset["intencoes"]:
    if intent["tag"] == intencao_predita:
      resposta = random.choice(intent["respostas"])
      return f"{resposta} \n Emoção: {emocao} \n Score: {score}"

  return "Desculpe, não entendi."

while True:
  entrada = input("Você: ")
  if entrada.lower() in ["sair", "fechar", "bye bye", "hasta la vista"]:
    print("Chatbot: Até mais!")
    break
  resposta = chatbot(entrada)
  print(f"Chatbot: {resposta}")

"""# Observações:
O Modelo BERT para análise funcina por ter adaptação para o idioma Português do Brasil, mas é bem mais pesado para executar na primeira vez;

Adicionei os campos pedidos na atividade ao dataset e o de segurança, esse último era para testar se realmente funcionavam as emoções, deixei com adicional;

Abaixo está o código de análise de sentimentos com o Vader que não usei devido ao vader analisar como neutro termos de outra línguas além das disponíveis, por exemplo, tem suporte a inglês e com essa língua funciona.
"""

# Usando o Vader retorna que as emoções são neutras
# Iniciando a SIA
# sia = SentimentIntensityAnalyzer()

# Preparação dos sentimentos
 # def sentimento(texto):
    # SentimentIntensityAnalyzer consegue a pontuação de sentimentos
    # pontuacao = sia.polarity_scores(texto)

    # Descobre pela pontuação se é positivo ou negativo, reduzido de 0.5 para 0.2
    # if pontuacao['compound'] >= 0.01:
        # return 'positivo'
    # elif pontuacao['compound'] <= -0.01:
        #return 'negativo'
    # else:
        # return 'neutro'

# Customizando o entendimento do léxico do Vader:

# lexicon_customizer = {
#     "custa caro": -2.0,
#     "muito obrigado": 2.0,
#     "suporte ruim": -3.0,
#     "excelente serviço": 3.0
# }
# sia.lexicon.update(lexicon_customizer)